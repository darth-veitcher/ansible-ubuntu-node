---
# file: roles/kubeadm/tasks/cluster-init.yaml
# Initialises a cluster with kubeadm
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node
# TODO: listen specifically on the wireguard interface
# TODO: implement HA with stacked control plane and etcd nodes
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/#stacked-control-plane-and-etcd-nodes
# TODO: uninstall pretty fragile at the moment..

- name: pull images
  command: kubeadm config images pull
  tags: cluster, cluster_init, preflight
  when: clean_install is defined and clean_install|bool

- name: check for existing install
  command: 
    warn: false
    cmd: curl --insecure https://localhost:6443
  register: cmd_res
  tags: cluster, cluster_init, clean_install
  ignore_errors: true

- name: get static hostname
  command: hostnamectl --static
  register: hostnamectl
  tags: cluster

- debug: var=hostnamectl.stdout
  tags: cluster

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down
- name: uninstall existing instance
  raw: |
    kubectl drain {{ hostnamectl.stdout }} --delete-local-data=true --ignore-daemonsets=true --force; \
    kubectl delete node {{ hostnamectl.stdout }}; \
    kubeadm reset -f; \
    rm -rf ~/.kube; \
    rm -rf /etc/kubernetes; \
    rm -rf /opt/cni/bin; \
    rm -rf /var/lib/etcd; \
    rm -rf /etc/cni/net.d
  tags: cluster, cluster_init, clean_install
  ignore_errors: true  
  when: clean_install is defined and clean_install|bool and cmd_res.stdout.find("apiVersion") >= 1

# single control-plane
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
- name: initialise cluster
  command: kubeadm init --pod-network-cidr={{ CIDR }} --control-plane-endpoint={{ hostnamectl.stdout }}
  tags: cluster, cluster_init
  register: cluster_init_output
  when: (clean_install is defined and clean_install|bool) or (cmd_res.stdout.find("apiVersion") == -1)

- debug: var=cluster_init_output.stdout
  tags: cluster, cluster_init
  when: cluster_init_output is defined

# TODO: multi-master

# tidy up
- name: find {{deploy_user_name}} $HOME directory
  shell: cat /etc/passwd | grep {{deploy_user_name}} | cut -d":" -f6
  register: user_home
  tags: cluster_init, cluster, users

- name: ensure {{user_home.stdout}}/.kube exists and is owned by {{deploy_user_name}}
  file:
    path: "{{user_home.stdout}}/.kube"
    state: directory
    owner: "{{deploy_user_name}}"
    group: "{{deploy_user_name}}"
  tags: cluster_init, cluster, users

- name: delete existing kubeconfig
  shell: 
    cmd: rm -rf {{ user_home.stdout }}/.kube/config
    warn: false
  tags: cluster_init, cluster, users

- name: ensure /root/.kube exists and is owned by root
  file:
    path: /root/.kube
    state: directory
    owner: root
    group: root
  tags: cluster_init, cluster, users

- name: create kubeconfig for root
  shell: |
    export KUBECONFIG=/etc/kubernetes/admin.conf; \
    kubectl config view --raw >/root/.kube/config
  become: true
  tags: cluster_init, cluster, users

- name: create kubeconfig for {{ deploy_user_name }}
  shell: |
    export KUBECONFIG=/etc/kubernetes/admin.conf; \
    kubectl config view --raw >"{{ user_home.stdout }}"/.kube/config; \
    chown $(id -u "{{deploy_user_name}}"):$(id -g "{{deploy_user_name}}") "{{ user_home.stdout }}"/.kube/config
  become: true
  tags: cluster_init, cluster, users

- debug: var=cluster_init_output.stdout
  tags: cluster, cluster_init

# Find the join token and kubeadm command
# https://stackoverflow.com/a/45743739/322358
- name: set join token fact
  set_fact:
    token: "{{ cluster_init_output.stdout | regex_search(regexp,'\\1') | first}}"
  vars:
    regexp: '--token\s(.*[^\s])\s\\'
  tags: cluster, cluster_init
- debug: 
    msg: "Token set as: {{ token }}"
  tags: cluster, cluster_init
- name: set join kubeadm command
  set_fact:
    kubeadm_join_command: "{{ cluster_init_output.stdout | regex_search(regexp,'\\1') | first}}"
  vars:
    regexp: '(kubeadm.* --token\s.*[^\s])\s\\'
  tags: cluster, cluster_init
- debug: 
    msg: "Kubeadm join command set as: {{ kubeadm_join_command }}"
  tags: cluster, cluster_init

- name: get public ip address
  shell: dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'\"' '{ print $2}'
  register: public_ip_lookup
  tags: cluster, cluster_init
- name: set master_node_ip variable to {{ public_ip_lookup.stdout }}
  set_fact:
    master_node_ip: "{{ public_ip_lookup.stdout }}"
  tags: cluster, cluster_init

- name: create local copy of kubeconfig
  fetch:
    src: "{{ user_home.stdout }}/.kube/config"
    dest: deploy/.kube/config
    flat: yes
  tags: cluster, cluster_init, get_config

- include: cluster-init/cluster-init-cni.yaml
  tags: cluster, cluster_init, cni
  run_once: yes

- include: helm.yaml
  tags: cluster, cluster_init, helm
  run_once: yes