# file: roles/kubeadm/tasks/main.yaml
# Installs vanilla kubernetes cluster using kubeadm. Heavily borrows from *many*
# mistakes made in the homelab...

# TODO: take into account wireguard and listen to specific interface

- include: pre-reqs.yaml
  tags: prereqs

# Initialise a cluster (we don't have any master nodes)
- include: cluster-init.yaml
  when: control_plane_endpoint is not defined
  tags: cluster, cluster_init
  run_once: yes

# TODO: Join a cluster as a worker
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#join-nodes
# kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>
# kubeadm join --token <token> <control-plane-host>:<control-plane-port> --discovery-token-unsafe-skip-ca-verification

- name: remove master node taint
  shell: kubectl taint nodes --all node-role.kubernetes.io/master-
  tags: cluster
  become: no
  run_once: yes
  ignore_errors: true

# - name: check for existing ingress
#   command: kubectl get svc -A -l 'release={{ ingress_release_name }}'
#   run_once: yes
#   register: ingress_status
#   tags: helm, ingress

# - name: uninstall previous release
#   command: helm uninstall {{ ingress_release_name }}
#   when: ingress_status.stdout.find("ingress") >= 1 and clean_install|bool
#   run_once: yes
#   tags: helm, ingress

# - name: install ingress
#   command: |
#     helm install {{ ingress_release_name }} stable/nginx-ingress \
#       --set controller.kind=DaemonSet \
#       --set controller.service.type=LoadBalancer \
#       --set controller.hostNetwork=true
#   when: (ingress_status.stdout.find("ingress") >= 1 and clean_install|bool) or (ingress_status.stdout.find("ingress") == -1)
#   run_once: yes
#   tags: helm, ingress